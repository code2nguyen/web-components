---
import { Code } from 'astro:components'
import CodeBlock from './CodeBlock.astro'

import type * as shiki from 'shikiji'
import { IconButton } from '@c2n/icon-button'
import { ExpansionPanel } from '@c2n/expansion-panel'

interface Props {
  code: string
  lang: shiki.BuiltinLanguage
  uid: string
  github?: string
  compack?: string
  style: string
}

const { code: rawCode, lang, github, compack, uid, style } = Astro.props
let code = rawCode.replace(/\\\\/g, '\\')
code = rawCode.replace(/\\n/g, '\n')
code = code.replace(/\\"/g, '"')
code = code.replace(/^"|"$/g, '')
---

<ExpansionPanel client:load class={'mdx-code-block ' + (compack ? 'compack' : '')} title-not-clickable>
  <IconButton client:load slot="icon" class="open-close-icon" tooltip="Show code">
    <svg fill="currentColor" viewBox="0 0 256 256">
      <path
        d="M69.12,94.15,28.5,128l40.62,33.85a8,8,0,1,1-10.24,12.29l-48-40a8,8,0,0,1,0-12.29l48-40a8,8,0,0,1,10.24,12.3Zm176,27.7-48-40a8,8,0,1,0-10.24,12.3L227.5,128l-40.62,33.85a8,8,0,1,0,10.24,12.29l48-40a8,8,0,0,0,0-12.29ZM162.73,32.48a8,8,0,0,0-10.25,4.79l-64,176a8,8,0,0,0,4.79,10.26A8.14,8.14,0,0,0,96,224a8,8,0,0,0,7.52-5.27l64-176A8,8,0,0,0,162.73,32.48Z"
      ></path>
    </svg>
  </IconButton>
  <IconButton client:load slot="expanded-icon" class="open-close-icon">
    <svg fill="currentColor" viewBox="0 0 256 256"
      ><path d="M213.66,165.66a8,8,0,0,1-11.32,0L128,91.31,53.66,165.66a8,8,0,0,1-11.32-11.32l80-80a8,8,0,0,1,11.32,0l80,80A8,8,0,0,1,213.66,165.66Z"
      ></path></svg
    >
  </IconButton>
  <div slot="title" data-uid={uid}>
    {style ? <Fragment set:html={style} /> : ''}
    <Fragment set:html={`<!-- component-${uid} -->\n`} />
    <slot />
    <IconButton client:load class="mdx-code-block-setting-btn" data-uid={uid} tooltip="Interacting">
      <svg fill="currentColor" viewBox="0 0 256 256"
        ><path
          d="M32,80a8,8,0,0,1,8-8H72a8,8,0,0,1,0,16H40A8,8,0,0,1,32,80Zm184,88H176V152a8,8,0,0,0-16,0v48a8,8,0,0,0,16,0V184h40a8,8,0,0,0,0-16Zm-80,0H40a8,8,0,0,0,0,16h96a8,8,0,0,0,0-16Zm-32-56a8,8,0,0,0,8-8V88H216a8,8,0,0,0,0-16H112V56a8,8,0,0,0-16,0v48A8,8,0,0,0,104,112Z"
        ></path></svg
      >
    </IconButton>
  </div>
  <CodeBlock code={code} lang={lang} uid={uid} />
</ExpansionPanel>

<script>
  import { $configStore } from '../store/config-store'
  import { $configCodeStore } from '../store/config-code-store'
  import { closestElementSibling, getParent, getComponentByUid, normalizeCssValue, updateDomCssValue, updateDomAttribute } from '../utils/dom'
  import { getComponentManifestData } from '../utils/manifest-utils'
  import { componentManifests } from '../store/component-manifests'
  import { css } from 'lit'

  const settingBtns = document.querySelectorAll('.mdx-code-block-setting-btn')

  for (const settingBtn of settingBtns) {
    settingBtn.addEventListener('click', (event) => {
      const btn = (event.target as HTMLElement).closest('c2-icon-button') as HTMLElement
      const uid = btn?.dataset.uid
      if (uid) {
        const hideConfig = $configStore.get()['uid'] == uid
        if (hideConfig) {
          $configStore.setKey('showConfig', false)
          $configStore.setKey('uid', '')
          return
        }

        const codeBlockElement = closestElementSibling(getParent(btn), '.code')!
        const code = codeBlockElement.querySelector('code')?.innerText
        const lang = codeBlockElement.dataset.lang
        const targetComp = getComponentByUid(uid)
        if (!targetComp) return
        const componentManifest = componentManifests[targetComp.tagName.toLowerCase()]
        const componentManifestData = getComponentManifestData(targetComp, componentManifest)
        console.log(componentManifestData)
        $configStore.set({
          uid,
          showConfig: true,
          ...componentManifestData,
        })
        $configCodeStore.setKey(uid, { code: code ?? '', lang: lang ?? '' })
      }
    })
  }

  // update config from configStore
  $configStore.subscribe((componentConfig) => {
    const targetUID = componentConfig.uid
    let manifestStyleStr = ''
    if (!targetUID) return
    const targetComp = getComponentByUid(targetUID)
    if (!targetComp) return

    if (componentConfig.host?.w && componentConfig.host?.w !== 'auto') {
      const width = normalizeCssValue(componentConfig.host.w)
      manifestStyleStr += `width:${width};`
      targetComp.style.width = width
    }
    if (componentConfig.host?.h && componentConfig.host?.h !== 'auto') {
      const height = normalizeCssValue(componentConfig.host.h)
      manifestStyleStr += `height:${height};`
      targetComp.style.height = height
    }
    targetComp.dataset.style = manifestStyleStr

    updateDomCssValue(targetComp, componentConfig.cssProperties)
    Object.keys(componentConfig.stateCssProperties).forEach((state) => {
      updateDomCssValue(targetComp, componentConfig.stateCssProperties![state])
    })
    updateDomAttribute(targetComp, componentConfig.attributes)
  })
</script>
