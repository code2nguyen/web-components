---
import type { visit } from 'unist-util-visit'
import ListComponents from '../components/ListComponents.astro'
import { ComponentConfigurationPanel } from '../components/configuration/ComponentConfigurationPanel'
import { Details } from '@c2n/details'

interface Props {
  componentId: string
}
const { componentId } = Astro.props
import { SideNav } from '@c2n/side-nav'
---

<div class="document-page">
  <SideNav client:load class="side-nav" opened tablet-mode="over" responsive-tablet>
    <div class="side-nav-content" slot="side-nav-content">
      <Details expanded client:load>
        <div slot="title" class="nav-title">Component</div>
        <ListComponents componentId={componentId} class="detail-content" />
        <svg slot="icon" viewBox="0 0 256 256"
          ><path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path></svg
        >
      </Details>
      <!-- <Details client:load>
      <div slot="title" class="nav-title">Pens</div>
      <ListComponents componentId="v" />
      <svg slot="icon" viewBox="0 0 256 256"
        ><path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path></svg
      >
    </Details> -->
    </div>

    <section class="component-content">
      <slot />
    </section>
    <section class="component-configuration">
      <ComponentConfigurationPanel client:load />
    </section>
  </SideNav>
</div>

<style class="scss">
  .document-page {
    --nav-sidew-width: 240px;
    --config-side-width: 280px;
    display: flex;

    .component-content {
      background-color: white;
      padding: 16px;
      width: clamp(200px, 1050px, 100vw);
    }
    .side-nav {
      --c2-side-nav--open-width: var(--nav-sidew-width);
      --c2-details--border-right: none;
      --c2-details--border-left: none;
      --c2-details--border-top: none;
      --c2-details--border-bottom: none;
      --c2-details__header--flex-direction: row-reverse;
      --c2-details__header__icon--rotate: 90deg;
      --c2-details__header__icon--width: 12px;
      --c2-details__header__icon--gap: 8px;
      --c2-details__header--padding-top: 4px;
      --c2-details__header--padding-left: 0px;
      --c2-details__header--padding-right: 0px;
      --c2-details__header-padding-bottom: 4px;
      --c2-details__header__hover--background: transparent;
      .side-nav-content {
        background-color: var(--bg-color);
        height: calc(100vh - 72px);
        overflow-y: auto;
        font-size: 0.9rem;
        gap: 10px;
        .nav-title {
          font-weight: 500;
          user-select: none;
        }
        .detail-content {
          margin-left: 5px;
        }
      }
    }

    .component-configuration {
      display: none;
      position: fixed;
      width: var(--config-side-width);
      padding: 0px;
      right: 0;
      background-color: var(--bg-config-panel);
      height: calc(100vh - 104px);
      margin: 16px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      overflow: auto;
    }

    &.show-configuration-panel {
      margin-right: calc(var(--config-side-width));
      overflow-x: hidden;
      overflow-y: auto;
      .component-content {
        width: clamp(200px, 1050px, calc(100vw - var(--nav-sidew-width) - var(--config-side-width)));
      }
      .component-configuration {
        display: block;
      }
    }
  }
</style>

<script>
  import { $configStore } from '../store/config-store.ts'
  import { nextSibling, firstChild } from '../utils/dom.ts'

  const tableRowHeader = document.querySelectorAll("tr[class*='t-h']")
  for (const tableRow of tableRowHeader) {
    tableRow.addEventListener('click', (event) => {
      let tr = (event.target as HTMLElement).closest('tr')
      const level = tr?.dataset.level
      const collapsed = tr?.classList.toggle('collapsed')
      if (tr && level) {
        let finished = true
        do {
          const nextTr = nextSibling(tr, 'TR') as HTMLTableRowElement
          finished = true
          if (nextTr) {
            const siblingLevel = nextTr.dataset.level
            if (!siblingLevel || Number(level) < Number(siblingLevel)) {
              nextTr.classList.toggle('hide', collapsed)
              finished = false
              if (siblingLevel) {
                nextTr?.classList.toggle('collapsed', collapsed)
              }
              tr = nextTr
            }
          }
        } while (!finished)
      }
    })
  }

  const tableRows = document.querySelectorAll("tbody > tr:not([class*='t-h'])")
  for (const tableRow of tableRows) {
    tableRow.addEventListener('click', async (event) => {
      let tr = (event.target as HTMLElement).closest('tr')
      tr?.classList.toggle('copied', true)
      const firstTd = firstChild(tr as HTMLElement, 'TD')
      const text = firstTd!.innerText
      await navigator.clipboard.writeText(text)
      setTimeout(() => {
        tr?.classList.remove('copied')
      }, 1000)
    })
  }

  $configStore.subscribe((configState) => {
    console.log(configState)
    document.querySelectorAll(`.mdx-code-block-setting-btn:not([data-uid="${configState.uid}"])`)?.forEach((item) => item.classList.toggle('active', false))
    document.querySelector(`.mdx-code-block-setting-btn[data-uid="${configState.uid}"]`)?.classList.toggle('active', !!configState.showConfig)
    document.querySelector('.document-page')?.classList.toggle('show-configuration-panel', !!configState.showConfig)
  })
</script>
